@using AssignmentEAP.Models
@model IEnumerable<AssignmentEAP.Models.Student>


@{
    ViewBag.Title = "Details";
    var currentClass = ViewBag.CurrentClass as Class;
}

<h2>@currentClass.Class_name</h2>
<div class="row" style="margin: 0px 0px 20px 5px;">
    <div class="col-lg-12">
        <div class="col-lg-7 mb-6 position-relative" style="padding-left: 25px;margin: 0 auto;">
            <input type="text" name="datefilter" id="datefilter" value="" class="form-control input-custom col-lg-12" data-id="@currentClass.Class_Id" />
            <i class="far fa-calendar-alt text-gray position-absolute icon-calendar"></i>
        </div>
    </div>

    <div class=" row col-lg-12" style="margin-top: 30px;">
        <div class="col-lg-7" style="padding-left: 25px;margin: 0 auto;">
            <b class="col-lg-3">Count: <span id="late-counter"></span></b>
            <b class="col-lg-5">Money: <span id="total-money"></span>VND</b>
            <b class="col-lg-4">Push-Up: <span id="total-pushup"></span> turn</b>
        </div>

    </div>
</div>
<div class="col-lg-12 text-center">
    <div id="chart_div" class="col-lg-12"></div>
</div>
<div class="row col-lg-12" style="margin-top: 30px;">
    <div class="col-lg-2">
        <h4>@currentClass.Class_name</h4>
    </div>
    <div class="col-lg-3">
        <p>
            @Html.ActionLink("Edit name", "Edit", new { id = currentClass.Class_Id }) |
            @Html.ActionLink("Back to list", "Index")
        </p>
    </div>
</div>
<div class="col-lg-12 mb-12">
    <table id="order-listing" class="table">
        <thead>
            <tr>
                <th>Avatar</th>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        <img src="@item.Avatar" alt="@item.Student_Name" style="max-width: 2.5rem;" class="img-fluid rounded-circle shadow">
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RollNumber)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Student_Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Phone)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.RollNumber }) |
                        @Html.ActionLink("Details", "Details", new { id = item.RollNumber }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.RollNumber })
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



@section scripts{
    <script>
        $(function () {
            var classId = $('#datefilter').data('id');

            var startDate = new Date();
            startDate.setFullYear(startDate.getFullYear() - 1);
            var endDate = new Date();

            var startPara = getParameterFromUrl('start');
            if (startPara != null) {
                startDate = new Date(startPara);
            }
            var endPara = getParameterFromUrl('end');
            if (endPara != null) {
                endDate = new Date(endPara);
            }
            $('input[name="datefilter"]').daterangepicker({
                autoUpdateInput: true,
                startDate: startDate,
                endDate: endDate,
                locale: {
                    cancelLabel: 'Clear'
                },
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [
                        moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')
                    ]
                }
            });

            $('input[name="datefilter"]').on('apply.daterangepicker',
                function (ev, picker) {
                    var start = picker.startDate.format('YYYY-MM-DD');
                    var end = picker.endDate.format('YYYY-MM-DD');
                    window.location.href = window.location.href.split('?')[0] + '?start=' + start + '&end=' + end;
                });

            $.ajax({
                url: `/Classes/GetChartData?classId=${classId}&start=${startPara}&end=${endPara}`,
                type: 'GET',
                success: function (responseData) {
                    google.charts.load('current', { 'packages': ['line', 'corechart'] });
                    google.charts.setOnLoadCallback(drawChart);

                    function drawChart() {
                        var chartDiv = document.getElementById('chart_div');

                        var data = new google.visualization.DataTable();
                        data.addColumn('date', 'Month');
                        data.addColumn('number', "Money");
                        data.addColumn('number', "Push-up");
                        var total = 0, totalMoney = 0, totalPushUp = 0;
                        for (var i = 0; i < responseData.length; i++) {
                            data.addRow([new Date(responseData[i].Date), responseData[i].Money, responseData[i].PushUp]);
                            total += responseData[i].Count;
                            totalMoney += responseData[i].Money;
                            totalPushUp += responseData[i].PushUp;
                        }
                        $('#late-counter').html(total);
                        $('#total-money').html(totalMoney);
                        $('#total-pushup').html(totalPushUp);

                        var classicOptions = {
                            //title: 'Thống kê số tiền (push-up) đi học muộn của sinh viên',
                            series: {
                                0: { targetAxisIndex: 0 },
                                1: { targetAxisIndex: 1 }
                            },
                            vAxes: {
                                0: { title: 'Money (VNĐ)' },
                                1: { title: 'Push-up (lần)' }
                            },
                            hAxis: {
                            },
                            vAxis: {
                            }
                        };
                        function drawClassicChart() {
                            var classicChart = new google.visualization.LineChart(chartDiv);
                            classicChart.draw(data, classicOptions);
                        }
                        drawClassicChart();
                    }
                }
            });

        });

        function getParameterFromUrl(parameter) {
            var url_string = window.location.href;
            var url = new URL(url_string);
            return url.searchParams.get(parameter);
        }
    </script>
}